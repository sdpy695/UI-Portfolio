{"ast":null,"code":"\"use strict\";\n\nvar findRelation = require(\"./findRelation\");\nvar objUtils = require(\"../util/object\");\nvar pathUtils = require(\"../util/path\");\nfunction absolutize(urlObj, siteUrlObj, options) {\n  findRelation.upToPath(urlObj, siteUrlObj, options);\n\n  // Fill in relative URLs\n  if (urlObj.extra.relation.minimumScheme) urlObj.scheme = siteUrlObj.scheme;\n  if (urlObj.extra.relation.minimumAuth) urlObj.auth = siteUrlObj.auth;\n  if (urlObj.extra.relation.minimumHost) urlObj.host = objUtils.clone(siteUrlObj.host);\n  if (urlObj.extra.relation.minimumPort) copyPort(urlObj, siteUrlObj);\n  if (urlObj.extra.relation.minimumScheme) copyPath(urlObj, siteUrlObj);\n\n  // Check remaining relativeness now that path has been copied and/or resolved\n  findRelation.pathOn(urlObj, siteUrlObj, options);\n\n  // Fill in relative URLs\n  if (urlObj.extra.relation.minimumResource) copyResource(urlObj, siteUrlObj);\n  if (urlObj.extra.relation.minimumQuery) urlObj.query = objUtils.clone(siteUrlObj.query);\n  if (urlObj.extra.relation.minimumHash) urlObj.hash = siteUrlObj.hash;\n}\n\n/*\n\tGet an absolute path that's relative to site url.\n*/\nfunction copyPath(urlObj, siteUrlObj) {\n  if (urlObj.extra.relation.maximumHost || !urlObj.extra.hrefInfo.minimumResourceOnly) {\n    var pathArray = urlObj.path.absolute.array;\n    var pathString = \"/\";\n\n    // If not erroneous URL\n    if (pathArray) {\n      // If is relative path\n      if (urlObj.extra.hrefInfo.minimumPathOnly && urlObj.path.absolute.string.indexOf(\"/\") !== 0) {\n        // Append path to site path\n        pathArray = siteUrlObj.path.absolute.array.concat(pathArray);\n      }\n      pathArray = pathUtils.resolveDotSegments(pathArray);\n      pathString += pathUtils.join(pathArray);\n    } else {\n      pathArray = [];\n    }\n    urlObj.path.absolute.array = pathArray;\n    urlObj.path.absolute.string = pathString;\n  } else {\n    // Resource-, query- or hash-only or empty\n    urlObj.path = objUtils.clone(siteUrlObj.path);\n  }\n}\nfunction copyPort(urlObj, siteUrlObj) {\n  urlObj.port = siteUrlObj.port;\n  urlObj.extra.portIsDefault = siteUrlObj.extra.portIsDefault;\n}\nfunction copyResource(urlObj, siteUrlObj) {\n  urlObj.resource = siteUrlObj.resource;\n  urlObj.extra.resourceIsIndex = siteUrlObj.extra.resourceIsIndex;\n}\nmodule.exports = absolutize;","map":{"version":3,"names":["findRelation","require","objUtils","pathUtils","absolutize","urlObj","siteUrlObj","options","upToPath","extra","relation","minimumScheme","scheme","minimumAuth","auth","minimumHost","host","clone","minimumPort","copyPort","copyPath","pathOn","minimumResource","copyResource","minimumQuery","query","minimumHash","hash","maximumHost","hrefInfo","minimumResourceOnly","pathArray","path","absolute","array","pathString","minimumPathOnly","string","indexOf","concat","resolveDotSegments","join","port","portIsDefault","resource","resourceIsIndex","module","exports"],"sources":["/Users/Chloe/Desktop/CS1300/UI-Portfolio/node_modules/relateurl/lib/relate/absolutize.js"],"sourcesContent":["\"use strict\";\n\nvar findRelation = require(\"./findRelation\");\nvar objUtils     = require(\"../util/object\");\nvar pathUtils    = require(\"../util/path\");\n\n\n\nfunction absolutize(urlObj, siteUrlObj, options)\n{\n\tfindRelation.upToPath(urlObj, siteUrlObj, options);\n\t\n\t// Fill in relative URLs\n\tif (urlObj.extra.relation.minimumScheme) urlObj.scheme = siteUrlObj.scheme;\n\tif (urlObj.extra.relation.minimumAuth)   urlObj.auth   = siteUrlObj.auth;\n\tif (urlObj.extra.relation.minimumHost)   urlObj.host   = objUtils.clone(siteUrlObj.host);\n\tif (urlObj.extra.relation.minimumPort)   copyPort(urlObj, siteUrlObj);\n\tif (urlObj.extra.relation.minimumScheme) copyPath(urlObj, siteUrlObj);\n\t\n\t// Check remaining relativeness now that path has been copied and/or resolved\n\tfindRelation.pathOn(urlObj, siteUrlObj, options);\n\t\n\t// Fill in relative URLs\n\tif (urlObj.extra.relation.minimumResource) copyResource(urlObj, siteUrlObj);\n\tif (urlObj.extra.relation.minimumQuery)    urlObj.query = objUtils.clone(siteUrlObj.query);\n\tif (urlObj.extra.relation.minimumHash)     urlObj.hash  = siteUrlObj.hash;\n}\n\n\n\n/*\n\tGet an absolute path that's relative to site url.\n*/\nfunction copyPath(urlObj, siteUrlObj)\n{\n\tif (urlObj.extra.relation.maximumHost || !urlObj.extra.hrefInfo.minimumResourceOnly)\n\t{\n\t\tvar pathArray = urlObj.path.absolute.array;\n\t\tvar pathString = \"/\";\n\t\t\n\t\t// If not erroneous URL\n\t\tif (pathArray)\n\t\t{\n\t\t\t// If is relative path\n\t\t\tif (urlObj.extra.hrefInfo.minimumPathOnly && urlObj.path.absolute.string.indexOf(\"/\")!==0)\n\t\t\t{\n\t\t\t\t// Append path to site path\n\t\t\t\tpathArray = siteUrlObj.path.absolute.array.concat(pathArray);\n\t\t\t}\n\t\t\t\n\t\t\tpathArray   = pathUtils.resolveDotSegments(pathArray);\n\t\t\tpathString += pathUtils.join(pathArray);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpathArray = [];\n\t\t}\n\t\t\n\t\turlObj.path.absolute.array  = pathArray;\n\t\turlObj.path.absolute.string = pathString;\n\t}\n\telse\n\t{\n\t\t// Resource-, query- or hash-only or empty\n\t\turlObj.path = objUtils.clone(siteUrlObj.path);\n\t}\n}\n\n\n\nfunction copyPort(urlObj, siteUrlObj)\n{\n\turlObj.port = siteUrlObj.port;\n\t\n\turlObj.extra.portIsDefault = siteUrlObj.extra.portIsDefault;\n}\n\n\n\nfunction copyResource(urlObj, siteUrlObj)\n{\n\turlObj.resource = siteUrlObj.resource;\n\t\n\turlObj.extra.resourceIsIndex = siteUrlObj.extra.resourceIsIndex;\n}\n\n\n\nmodule.exports = absolutize;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}