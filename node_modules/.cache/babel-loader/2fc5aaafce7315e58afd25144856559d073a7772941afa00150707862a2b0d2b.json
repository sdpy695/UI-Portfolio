{"ast":null,"code":"// @ts-check\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n/** @typedef {import(\"webpack/lib/Compiler.js\")} WebpackCompiler */\n/** @typedef {import(\"webpack/lib/Chunk.js\")} WebpackChunk */\n'use strict';\n\n/**\n * @file\n * This file uses webpack to compile a template with a child compiler.\n *\n * [TEMPLATE] -> [JAVASCRIPT]\n *\n */\n'use strict';\n\nlet instanceId = 0;\n/**\n * The HtmlWebpackChildCompiler is a helper to allow reusing one childCompiler\n * for multiple HtmlWebpackPlugin instances to improve the compilation performance.\n */\nclass HtmlWebpackChildCompiler {\n  /**\n   *\n   * @param {string[]} templates\n   */\n  constructor(templates) {\n    /** Id for this ChildCompiler */\n    this.id = instanceId++;\n    /**\n     * @type {string[]} templateIds\n     * The template array will allow us to keep track which input generated which output\n     */\n    this.templates = templates;\n    /**\n     * @type {Promise<{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}>}\n     */\n    this.compilationPromise; // eslint-disable-line\n    /**\n     * @type {number}\n     */\n    this.compilationStartedTimestamp; // eslint-disable-line\n    /**\n     * @type {number}\n     */\n    this.compilationEndedTimestamp; // eslint-disable-line\n    /**\n     * All file dependencies of the child compiler\n     * @type {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}}\n     */\n    this.fileDependencies = {\n      fileDependencies: [],\n      contextDependencies: [],\n      missingDependencies: []\n    };\n  }\n\n  /**\n   * Returns true if the childCompiler is currently compiling\n   * @returns {boolean}\n   */\n  isCompiling() {\n    return !this.didCompile() && this.compilationStartedTimestamp !== undefined;\n  }\n\n  /**\n   * Returns true if the childCompiler is done compiling\n   */\n  didCompile() {\n    return this.compilationEndedTimestamp !== undefined;\n  }\n\n  /**\n   * This function will start the template compilation\n   * once it is started no more templates can be added\n   *\n   * @param {import('webpack').Compilation} mainCompilation\n   * @returns {Promise<{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}>}\n   */\n  compileTemplates(mainCompilation) {\n    const webpack = mainCompilation.compiler.webpack;\n    const Compilation = webpack.Compilation;\n    const NodeTemplatePlugin = webpack.node.NodeTemplatePlugin;\n    const NodeTargetPlugin = webpack.node.NodeTargetPlugin;\n    const LoaderTargetPlugin = webpack.LoaderTargetPlugin;\n    const EntryPlugin = webpack.EntryPlugin;\n\n    // To prevent multiple compilations for the same template\n    // the compilation is cached in a promise.\n    // If it already exists return\n    if (this.compilationPromise) {\n      return this.compilationPromise;\n    }\n    const outputOptions = {\n      filename: '__child-[name]',\n      publicPath: '',\n      library: {\n        type: 'var',\n        name: 'HTML_WEBPACK_PLUGIN_RESULT'\n      },\n      scriptType: /** @type {'text/javascript'} */'text/javascript',\n      iife: true\n    };\n    const compilerName = 'HtmlWebpackCompiler';\n    // Create an additional child compiler which takes the template\n    // and turns it into an Node.JS html factory.\n    // This allows us to use loaders during the compilation\n    const childCompiler = mainCompilation.createChildCompiler(compilerName, outputOptions, [\n    // Compile the template to nodejs javascript\n    new NodeTargetPlugin(), new NodeTemplatePlugin(), new LoaderTargetPlugin('node'), new webpack.library.EnableLibraryPlugin('var')]);\n    // The file path context which webpack uses to resolve all relative files to\n    childCompiler.context = mainCompilation.compiler.context;\n\n    // Generate output file names\n    const temporaryTemplateNames = this.templates.map((template, index) => `__child-HtmlWebpackPlugin_${index}-${this.id}`);\n\n    // Add all templates\n    this.templates.forEach((template, index) => {\n      new EntryPlugin(childCompiler.context, 'data:text/javascript,__webpack_public_path__ = __webpack_base_uri__ = htmlWebpackPluginPublicPath;', `HtmlWebpackPlugin_${index}-${this.id}`).apply(childCompiler);\n      new EntryPlugin(childCompiler.context, template, `HtmlWebpackPlugin_${index}-${this.id}`).apply(childCompiler);\n    });\n\n    // The templates are compiled and executed by NodeJS - similar to server side rendering\n    // Unfortunately this causes issues as some loaders require an absolute URL to support ES Modules\n    // The following config enables relative URL support for the child compiler\n    childCompiler.options.module = {\n      ...childCompiler.options.module\n    };\n    childCompiler.options.module.parser = {\n      ...childCompiler.options.module.parser\n    };\n    childCompiler.options.module.parser.javascript = {\n      ...childCompiler.options.module.parser.javascript,\n      url: 'relative'\n    };\n    this.compilationStartedTimestamp = new Date().getTime();\n    this.compilationPromise = new Promise((resolve, reject) => {\n      const extractedAssets = [];\n      childCompiler.hooks.thisCompilation.tap('HtmlWebpackPlugin', compilation => {\n        compilation.hooks.processAssets.tap({\n          name: 'HtmlWebpackPlugin',\n          stage: Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n        }, assets => {\n          temporaryTemplateNames.forEach(temporaryTemplateName => {\n            if (assets[temporaryTemplateName]) {\n              extractedAssets.push(assets[temporaryTemplateName]);\n              compilation.deleteAsset(temporaryTemplateName);\n            }\n          });\n        });\n      });\n      childCompiler.runAsChild((err, entries, childCompilation) => {\n        // Extract templates\n        const compiledTemplates = entries ? extractedAssets.map(asset => asset.source()) : [];\n        // Extract file dependencies\n        if (entries && childCompilation) {\n          this.fileDependencies = {\n            fileDependencies: Array.from(childCompilation.fileDependencies),\n            contextDependencies: Array.from(childCompilation.contextDependencies),\n            missingDependencies: Array.from(childCompilation.missingDependencies)\n          };\n        }\n        // Reject the promise if the childCompilation contains error\n        if (childCompilation && childCompilation.errors && childCompilation.errors.length) {\n          const errorDetails = childCompilation.errors.map(error => {\n            let message = error.message;\n            if (error.stack) {\n              message += '\\n' + error.stack;\n            }\n            return message;\n          }).join('\\n');\n          reject(new Error('Child compilation failed:\\n' + errorDetails));\n          return;\n        }\n        // Reject if the error object contains errors\n        if (err) {\n          reject(err);\n          return;\n        }\n        if (!childCompilation || !entries) {\n          reject(new Error('Empty child compilation'));\n          return;\n        }\n        /**\n         * @type {{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}}\n         */\n        const result = {};\n        compiledTemplates.forEach((templateSource, entryIndex) => {\n          // The compiledTemplates are generated from the entries added in\n          // the addTemplate function.\n          // Therefore the array index of this.templates should be the as entryIndex.\n          result[this.templates[entryIndex]] = {\n            content: templateSource,\n            hash: childCompilation.hash || 'XXXX',\n            entry: entries[entryIndex]\n          };\n        });\n        this.compilationEndedTimestamp = new Date().getTime();\n        resolve(result);\n      });\n    });\n    return this.compilationPromise;\n  }\n}\nmodule.exports = {\n  HtmlWebpackChildCompiler\n};","map":{"version":3,"names":["instanceId","HtmlWebpackChildCompiler","constructor","templates","id","compilationPromise","compilationStartedTimestamp","compilationEndedTimestamp","fileDependencies","contextDependencies","missingDependencies","isCompiling","didCompile","undefined","compileTemplates","mainCompilation","webpack","compiler","Compilation","NodeTemplatePlugin","node","NodeTargetPlugin","LoaderTargetPlugin","EntryPlugin","outputOptions","filename","publicPath","library","type","name","scriptType","iife","compilerName","childCompiler","createChildCompiler","EnableLibraryPlugin","context","temporaryTemplateNames","map","template","index","forEach","apply","options","module","parser","javascript","url","Date","getTime","Promise","resolve","reject","extractedAssets","hooks","thisCompilation","tap","compilation","processAssets","stage","PROCESS_ASSETS_STAGE_ADDITIONS","assets","temporaryTemplateName","push","deleteAsset","runAsChild","err","entries","childCompilation","compiledTemplates","asset","source","Array","from","errors","length","errorDetails","error","message","stack","join","Error","result","templateSource","entryIndex","content","hash","entry","exports"],"sources":["/Users/Chloe/Desktop/CS1300/UI-Portfolio/node_modules/html-webpack-plugin/lib/child-compiler.js"],"sourcesContent":["// @ts-check\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n/** @typedef {import(\"webpack/lib/Compiler.js\")} WebpackCompiler */\n/** @typedef {import(\"webpack/lib/Chunk.js\")} WebpackChunk */\n'use strict';\n/**\n * @file\n * This file uses webpack to compile a template with a child compiler.\n *\n * [TEMPLATE] -> [JAVASCRIPT]\n *\n */\n'use strict';\n\nlet instanceId = 0;\n/**\n * The HtmlWebpackChildCompiler is a helper to allow reusing one childCompiler\n * for multiple HtmlWebpackPlugin instances to improve the compilation performance.\n */\nclass HtmlWebpackChildCompiler {\n  /**\n   *\n   * @param {string[]} templates\n   */\n  constructor (templates) {\n    /** Id for this ChildCompiler */\n    this.id = instanceId++;\n    /**\n     * @type {string[]} templateIds\n     * The template array will allow us to keep track which input generated which output\n     */\n    this.templates = templates;\n    /**\n     * @type {Promise<{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}>}\n     */\n    this.compilationPromise; // eslint-disable-line\n    /**\n     * @type {number}\n     */\n    this.compilationStartedTimestamp; // eslint-disable-line\n    /**\n     * @type {number}\n     */\n    this.compilationEndedTimestamp; // eslint-disable-line\n    /**\n     * All file dependencies of the child compiler\n     * @type {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}}\n     */\n    this.fileDependencies = { fileDependencies: [], contextDependencies: [], missingDependencies: [] };\n  }\n\n  /**\n   * Returns true if the childCompiler is currently compiling\n   * @returns {boolean}\n   */\n  isCompiling () {\n    return !this.didCompile() && this.compilationStartedTimestamp !== undefined;\n  }\n\n  /**\n   * Returns true if the childCompiler is done compiling\n   */\n  didCompile () {\n    return this.compilationEndedTimestamp !== undefined;\n  }\n\n  /**\n   * This function will start the template compilation\n   * once it is started no more templates can be added\n   *\n   * @param {import('webpack').Compilation} mainCompilation\n   * @returns {Promise<{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}>}\n   */\n  compileTemplates (mainCompilation) {\n    const webpack = mainCompilation.compiler.webpack;\n    const Compilation = webpack.Compilation;\n\n    const NodeTemplatePlugin = webpack.node.NodeTemplatePlugin;\n    const NodeTargetPlugin = webpack.node.NodeTargetPlugin;\n    const LoaderTargetPlugin = webpack.LoaderTargetPlugin;\n    const EntryPlugin = webpack.EntryPlugin;\n\n    // To prevent multiple compilations for the same template\n    // the compilation is cached in a promise.\n    // If it already exists return\n    if (this.compilationPromise) {\n      return this.compilationPromise;\n    }\n\n    const outputOptions = {\n      filename: '__child-[name]',\n      publicPath: '',\n      library: {\n        type: 'var',\n        name: 'HTML_WEBPACK_PLUGIN_RESULT'\n      },\n      scriptType: /** @type {'text/javascript'} */('text/javascript'),\n      iife: true\n    };\n    const compilerName = 'HtmlWebpackCompiler';\n    // Create an additional child compiler which takes the template\n    // and turns it into an Node.JS html factory.\n    // This allows us to use loaders during the compilation\n    const childCompiler = mainCompilation.createChildCompiler(compilerName, outputOptions, [\n      // Compile the template to nodejs javascript\n      new NodeTargetPlugin(),\n      new NodeTemplatePlugin(),\n      new LoaderTargetPlugin('node'),\n      new webpack.library.EnableLibraryPlugin('var')\n    ]);\n    // The file path context which webpack uses to resolve all relative files to\n    childCompiler.context = mainCompilation.compiler.context;\n\n    // Generate output file names\n    const temporaryTemplateNames = this.templates.map((template, index) => `__child-HtmlWebpackPlugin_${index}-${this.id}`);\n\n    // Add all templates\n    this.templates.forEach((template, index) => {\n      new EntryPlugin(childCompiler.context, 'data:text/javascript,__webpack_public_path__ = __webpack_base_uri__ = htmlWebpackPluginPublicPath;', `HtmlWebpackPlugin_${index}-${this.id}`).apply(childCompiler);\n      new EntryPlugin(childCompiler.context, template, `HtmlWebpackPlugin_${index}-${this.id}`).apply(childCompiler);\n    });\n\n    // The templates are compiled and executed by NodeJS - similar to server side rendering\n    // Unfortunately this causes issues as some loaders require an absolute URL to support ES Modules\n    // The following config enables relative URL support for the child compiler\n    childCompiler.options.module = { ...childCompiler.options.module };\n    childCompiler.options.module.parser = { ...childCompiler.options.module.parser };\n    childCompiler.options.module.parser.javascript = { ...childCompiler.options.module.parser.javascript,\n      url: 'relative' };\n\n    this.compilationStartedTimestamp = new Date().getTime();\n    this.compilationPromise = new Promise((resolve, reject) => {\n      const extractedAssets = [];\n      childCompiler.hooks.thisCompilation.tap('HtmlWebpackPlugin', (compilation) => {\n        compilation.hooks.processAssets.tap(\n          {\n            name: 'HtmlWebpackPlugin',\n            stage: Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n          },\n          (assets) => {\n            temporaryTemplateNames.forEach((temporaryTemplateName) => {\n              if (assets[temporaryTemplateName]) {\n                extractedAssets.push(assets[temporaryTemplateName]);\n                compilation.deleteAsset(temporaryTemplateName);\n              }\n            });\n          }\n        );\n      });\n\n      childCompiler.runAsChild((err, entries, childCompilation) => {\n        // Extract templates\n        const compiledTemplates = entries\n          ? extractedAssets.map((asset) => asset.source())\n          : [];\n        // Extract file dependencies\n        if (entries && childCompilation) {\n          this.fileDependencies = { fileDependencies: Array.from(childCompilation.fileDependencies), contextDependencies: Array.from(childCompilation.contextDependencies), missingDependencies: Array.from(childCompilation.missingDependencies) };\n        }\n        // Reject the promise if the childCompilation contains error\n        if (childCompilation && childCompilation.errors && childCompilation.errors.length) {\n          const errorDetails = childCompilation.errors.map(error => {\n            let message = error.message;\n            if (error.stack) {\n              message += '\\n' + error.stack;\n            }\n            return message;\n          }).join('\\n');\n          reject(new Error('Child compilation failed:\\n' + errorDetails));\n          return;\n        }\n        // Reject if the error object contains errors\n        if (err) {\n          reject(err);\n          return;\n        }\n        if (!childCompilation || !entries) {\n          reject(new Error('Empty child compilation'));\n          return;\n        }\n        /**\n         * @type {{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}}\n         */\n        const result = {};\n        compiledTemplates.forEach((templateSource, entryIndex) => {\n          // The compiledTemplates are generated from the entries added in\n          // the addTemplate function.\n          // Therefore the array index of this.templates should be the as entryIndex.\n          result[this.templates[entryIndex]] = {\n            content: templateSource,\n            hash: childCompilation.hash || 'XXXX',\n            entry: entries[entryIndex]\n          };\n        });\n        this.compilationEndedTimestamp = new Date().getTime();\n        resolve(result);\n      });\n    });\n\n    return this.compilationPromise;\n  }\n}\n\nmodule.exports = {\n  HtmlWebpackChildCompiler\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}