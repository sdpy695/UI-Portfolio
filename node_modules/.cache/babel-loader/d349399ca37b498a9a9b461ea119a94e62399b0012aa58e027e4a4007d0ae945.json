{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n// Generated by CoffeeScript 2.5.1\nvar Block, SpecialString, cloneAndMergeDeep, terminalWidth;\nSpecialString = require('./SpecialString');\nterminalWidth = require('../tools').getCols();\nvar _require = require('../tools');\ncloneAndMergeDeep = _require.cloneAndMergeDeep;\nmodule.exports = Block = function () {\n  var self;\n  var Block = /*#__PURE__*/function () {\n    function Block(_layout, _parent) {\n      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n      _classCallCheck(this, Block);\n      this._layout = _layout;\n      this._parent = _parent;\n      this._name = _name;\n      this._config = cloneAndMergeDeep(self.defaultConfig, config);\n      this._closed = false;\n      this._wasOpenOnce = false;\n      this._active = false;\n      this._buffer = '';\n      this._didSeparateBlock = false;\n      this._linePrependor = new this._config.linePrependor.fn(this._config.linePrependor.options);\n      this._lineAppendor = new this._config.lineAppendor.fn(this._config.lineAppendor.options);\n      this._blockPrependor = new this._config.blockPrependor.fn(this._config.blockPrependor.options);\n      this._blockAppendor = new this._config.blockAppendor.fn(this._config.blockAppendor.options);\n    }\n    _createClass(Block, [{\n      key: \"_activate\",\n      value: function _activate() {\n        var deactivateParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        if (this._active) {\n          throw Error(\"This block is already active. This is probably a bug in RenderKid itself\");\n        }\n        if (this._closed) {\n          throw Error(\"This block is closed and cannot be activated. This is probably a bug in RenderKid itself\");\n        }\n        this._active = true;\n        this._layout._activeBlock = this;\n        if (deactivateParent) {\n          if (this._parent != null) {\n            this._parent._deactivate(false);\n          }\n        }\n        return this;\n      }\n    }, {\n      key: \"_deactivate\",\n      value: function _deactivate() {\n        var activateParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this._ensureActive();\n        this._flushBuffer();\n        if (activateParent) {\n          if (this._parent != null) {\n            this._parent._activate(false);\n          }\n        }\n        this._active = false;\n        return this;\n      }\n    }, {\n      key: \"_ensureActive\",\n      value: function _ensureActive() {\n        if (!this._wasOpenOnce) {\n          throw Error(\"This block has never been open before. This is probably a bug in RenderKid itself.\");\n        }\n        if (!this._active) {\n          throw Error(\"This block is not active. This is probably a bug in RenderKid itself.\");\n        }\n        if (this._closed) {\n          throw Error(\"This block is already closed. This is probably a bug in RenderKid itself.\");\n        }\n      }\n    }, {\n      key: \"_open\",\n      value: function _open() {\n        if (this._wasOpenOnce) {\n          throw Error(\"Block._open() has been called twice. This is probably a RenderKid bug.\");\n        }\n        this._wasOpenOnce = true;\n        if (this._parent != null) {\n          this._parent.write(this._whatToPrependToBlock());\n        }\n        this._activate();\n        return this;\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        this._deactivate();\n        this._closed = true;\n        if (this._parent != null) {\n          this._parent.write(this._whatToAppendToBlock());\n        }\n        return this;\n      }\n    }, {\n      key: \"isOpen\",\n      value: function isOpen() {\n        return this._wasOpenOnce && !this._closed;\n      }\n    }, {\n      key: \"write\",\n      value: function write(str) {\n        this._ensureActive();\n        if (str === '') {\n          return;\n        }\n        str = String(str);\n        this._buffer += str;\n        return this;\n      }\n    }, {\n      key: \"openBlock\",\n      value: function openBlock(config, name) {\n        var block;\n        this._ensureActive();\n        block = new Block(this._layout, this, config, name);\n        block._open();\n        return block;\n      }\n    }, {\n      key: \"_flushBuffer\",\n      value: function _flushBuffer() {\n        var str;\n        if (this._buffer === '') {\n          return;\n        }\n        str = this._buffer;\n        this._buffer = '';\n        this._writeInline(str);\n      }\n    }, {\n      key: \"_toPrependToLine\",\n      value: function _toPrependToLine() {\n        var fromParent;\n        fromParent = '';\n        if (this._parent != null) {\n          fromParent = this._parent._toPrependToLine();\n        }\n        return this._linePrependor.render(fromParent);\n      }\n    }, {\n      key: \"_toAppendToLine\",\n      value: function _toAppendToLine() {\n        var fromParent;\n        fromParent = '';\n        if (this._parent != null) {\n          fromParent = this._parent._toAppendToLine();\n        }\n        return this._lineAppendor.render(fromParent);\n      }\n    }, {\n      key: \"_whatToPrependToBlock\",\n      value: function _whatToPrependToBlock() {\n        return this._blockPrependor.render();\n      }\n    }, {\n      key: \"_whatToAppendToBlock\",\n      value: function _whatToAppendToBlock() {\n        return this._blockAppendor.render();\n      }\n    }, {\n      key: \"_writeInline\",\n      value: function _writeInline(str) {\n        var i, j, k, l, lineBreaksToAppend, m, ref, ref1, ref2, remaining; // special characters (such as <bg-white>) don't require\n        // any wrapping...\n\n        if (new SpecialString(str).isOnlySpecialChars()) {\n          // ... and directly get appended to the layout.\n          this._layout._append(str);\n          return;\n        } // we'll be removing from the original string till it's empty\n\n        remaining = str; // we might need to add a few line breaks at the end of the text.\n\n        lineBreaksToAppend = 0; // if text starts with line breaks...\n\n        if (m = remaining.match(/^\\n+/)) {\n          // ... we want to write the exact same number of line breaks\n          // to the layout.\n          for (i = j = 1, ref = m[0].length; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {\n            this._writeLine('');\n          }\n          remaining = remaining.substr(m[0].length, remaining.length);\n        } // and if the text ends with line breaks...\n\n        if (m = remaining.match(/\\n+$/)) {\n          // we want to write the exact same number of line breaks\n          // to the end of the layout.\n          lineBreaksToAppend = m[0].length;\n          remaining = remaining.substr(0, remaining.length - m[0].length);\n        } // now let's parse the body of the text:\n\n        while (remaining.length > 0) {\n          // anything other than a break line...\n          if (m = remaining.match(/^[^\\n]+/)) {\n            // ... should be wrapped as a block of text.\n            this._writeLine(m[0]);\n            remaining = remaining.substr(m[0].length, remaining.length); // for any number of line breaks we find inside the text...\n          } else if (m = remaining.match(/^\\n+/)) {\n            // ... we write one less break line to the layout.\n            for (i = k = 1, ref1 = m[0].length; 1 <= ref1 ? k < ref1 : k > ref1; i = 1 <= ref1 ? ++k : --k) {\n              this._writeLine('');\n            }\n            remaining = remaining.substr(m[0].length, remaining.length);\n          }\n        } // if we had line breaks to append to the layout...\n\n        if (lineBreaksToAppend > 0) {\n          // ... we append the exact same number of line breaks to the layout.\n          for (i = l = 1, ref2 = lineBreaksToAppend; 1 <= ref2 ? l <= ref2 : l >= ref2; i = 1 <= ref2 ? ++l : --l) {\n            this._writeLine('');\n          }\n        }\n      } // wraps a line into multiple lines if necessary, adds horizontal margins,\n      // etc, and appends it to the layout.\n    }, {\n      key: \"_writeLine\",\n      value: function _writeLine(str) {\n        var line, lineContent, lineContentLength, remaining, roomLeft, toAppend, toAppendLength, toPrepend, toPrependLength; // we'll be cutting from our string as we go\n\n        remaining = new SpecialString(str);\n        while (true) {\n          // left margin...\n          // this will continue until nothing is left of our block.\n          toPrepend = this._toPrependToLine(); // ... and its length\n\n          toPrependLength = new SpecialString(toPrepend).length; // right margin...\n\n          toAppend = this._toAppendToLine(); // ... and its length\n\n          toAppendLength = new SpecialString(toAppend).length; // how much room is left for content\n\n          roomLeft = this._layout._config.terminalWidth - (toPrependLength + toAppendLength); // how much room each line of content will have\n\n          lineContentLength = Math.min(this._config.width, roomLeft); // cut line content, only for the amount needed\n\n          lineContent = remaining.cut(0, lineContentLength, true); // line will consist of both margins and the content\n\n          line = toPrepend + lineContent.str + toAppend; // send it off to layout\n\n          this._layout._appendLine(line);\n          if (remaining.isEmpty()) {\n            break;\n          }\n        }\n      }\n    }]);\n    return Block;\n  }();\n  ;\n  self = Block;\n  Block.defaultConfig = {\n    blockPrependor: {\n      fn: require('./block/blockPrependor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    blockAppendor: {\n      fn: require('./block/blockAppendor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    linePrependor: {\n      fn: require('./block/linePrependor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    lineAppendor: {\n      fn: require('./block/lineAppendor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    lineWrapper: {\n      fn: require('./block/lineWrapper/Default'),\n      options: {\n        lineWidth: null\n      }\n    },\n    width: terminalWidth,\n    prefixRaw: '',\n    suffixRaw: ''\n  };\n  return Block;\n}.call(void 0);","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Block","SpecialString","cloneAndMergeDeep","terminalWidth","require","getCols","_require","module","exports","self","_layout","_parent","config","arguments","undefined","_name","_config","defaultConfig","_closed","_wasOpenOnce","_active","_buffer","_didSeparateBlock","_linePrependor","linePrependor","fn","options","_lineAppendor","lineAppendor","_blockPrependor","blockPrependor","_blockAppendor","blockAppendor","value","_activate","deactivateParent","Error","_activeBlock","_deactivate","activateParent","_ensureActive","_flushBuffer","_open","write","_whatToPrependToBlock","close","_whatToAppendToBlock","isOpen","str","String","openBlock","name","block","_writeInline","_toPrependToLine","fromParent","render","_toAppendToLine","j","k","l","lineBreaksToAppend","m","ref","ref1","ref2","remaining","isOnlySpecialChars","_append","match","_writeLine","substr","line","lineContent","lineContentLength","roomLeft","toAppend","toAppendLength","toPrepend","toPrependLength","Math","min","width","cut","_appendLine","isEmpty","amount","lineWrapper","lineWidth","prefixRaw","suffixRaw","call"],"sources":["/Users/Chloe/Desktop/CS1300/UI-Portfolio/node_modules/renderkid/lib/layout/Block.js"],"sourcesContent":["\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// Generated by CoffeeScript 2.5.1\nvar Block, SpecialString, cloneAndMergeDeep, terminalWidth;\nSpecialString = require('./SpecialString');\nterminalWidth = require('../tools').getCols();\n\nvar _require = require('../tools');\n\ncloneAndMergeDeep = _require.cloneAndMergeDeep;\n\nmodule.exports = Block = function () {\n  var self;\n\n  var Block = /*#__PURE__*/function () {\n    function Block(_layout, _parent) {\n      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n      _classCallCheck(this, Block);\n\n      this._layout = _layout;\n      this._parent = _parent;\n      this._name = _name;\n      this._config = cloneAndMergeDeep(self.defaultConfig, config);\n      this._closed = false;\n      this._wasOpenOnce = false;\n      this._active = false;\n      this._buffer = '';\n      this._didSeparateBlock = false;\n      this._linePrependor = new this._config.linePrependor.fn(this._config.linePrependor.options);\n      this._lineAppendor = new this._config.lineAppendor.fn(this._config.lineAppendor.options);\n      this._blockPrependor = new this._config.blockPrependor.fn(this._config.blockPrependor.options);\n      this._blockAppendor = new this._config.blockAppendor.fn(this._config.blockAppendor.options);\n    }\n\n    _createClass(Block, [{\n      key: \"_activate\",\n      value: function _activate() {\n        var deactivateParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        if (this._active) {\n          throw Error(\"This block is already active. This is probably a bug in RenderKid itself\");\n        }\n\n        if (this._closed) {\n          throw Error(\"This block is closed and cannot be activated. This is probably a bug in RenderKid itself\");\n        }\n\n        this._active = true;\n        this._layout._activeBlock = this;\n\n        if (deactivateParent) {\n          if (this._parent != null) {\n            this._parent._deactivate(false);\n          }\n        }\n\n        return this;\n      }\n    }, {\n      key: \"_deactivate\",\n      value: function _deactivate() {\n        var activateParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        this._ensureActive();\n\n        this._flushBuffer();\n\n        if (activateParent) {\n          if (this._parent != null) {\n            this._parent._activate(false);\n          }\n        }\n\n        this._active = false;\n        return this;\n      }\n    }, {\n      key: \"_ensureActive\",\n      value: function _ensureActive() {\n        if (!this._wasOpenOnce) {\n          throw Error(\"This block has never been open before. This is probably a bug in RenderKid itself.\");\n        }\n\n        if (!this._active) {\n          throw Error(\"This block is not active. This is probably a bug in RenderKid itself.\");\n        }\n\n        if (this._closed) {\n          throw Error(\"This block is already closed. This is probably a bug in RenderKid itself.\");\n        }\n      }\n    }, {\n      key: \"_open\",\n      value: function _open() {\n        if (this._wasOpenOnce) {\n          throw Error(\"Block._open() has been called twice. This is probably a RenderKid bug.\");\n        }\n\n        this._wasOpenOnce = true;\n\n        if (this._parent != null) {\n          this._parent.write(this._whatToPrependToBlock());\n        }\n\n        this._activate();\n\n        return this;\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        this._deactivate();\n\n        this._closed = true;\n\n        if (this._parent != null) {\n          this._parent.write(this._whatToAppendToBlock());\n        }\n\n        return this;\n      }\n    }, {\n      key: \"isOpen\",\n      value: function isOpen() {\n        return this._wasOpenOnce && !this._closed;\n      }\n    }, {\n      key: \"write\",\n      value: function write(str) {\n        this._ensureActive();\n\n        if (str === '') {\n          return;\n        }\n\n        str = String(str);\n        this._buffer += str;\n        return this;\n      }\n    }, {\n      key: \"openBlock\",\n      value: function openBlock(config, name) {\n        var block;\n\n        this._ensureActive();\n\n        block = new Block(this._layout, this, config, name);\n\n        block._open();\n\n        return block;\n      }\n    }, {\n      key: \"_flushBuffer\",\n      value: function _flushBuffer() {\n        var str;\n\n        if (this._buffer === '') {\n          return;\n        }\n\n        str = this._buffer;\n        this._buffer = '';\n\n        this._writeInline(str);\n      }\n    }, {\n      key: \"_toPrependToLine\",\n      value: function _toPrependToLine() {\n        var fromParent;\n        fromParent = '';\n\n        if (this._parent != null) {\n          fromParent = this._parent._toPrependToLine();\n        }\n\n        return this._linePrependor.render(fromParent);\n      }\n    }, {\n      key: \"_toAppendToLine\",\n      value: function _toAppendToLine() {\n        var fromParent;\n        fromParent = '';\n\n        if (this._parent != null) {\n          fromParent = this._parent._toAppendToLine();\n        }\n\n        return this._lineAppendor.render(fromParent);\n      }\n    }, {\n      key: \"_whatToPrependToBlock\",\n      value: function _whatToPrependToBlock() {\n        return this._blockPrependor.render();\n      }\n    }, {\n      key: \"_whatToAppendToBlock\",\n      value: function _whatToAppendToBlock() {\n        return this._blockAppendor.render();\n      }\n    }, {\n      key: \"_writeInline\",\n      value: function _writeInline(str) {\n        var i, j, k, l, lineBreaksToAppend, m, ref, ref1, ref2, remaining; // special characters (such as <bg-white>) don't require\n        // any wrapping...\n\n        if (new SpecialString(str).isOnlySpecialChars()) {\n          // ... and directly get appended to the layout.\n          this._layout._append(str);\n\n          return;\n        } // we'll be removing from the original string till it's empty\n\n\n        remaining = str; // we might need to add a few line breaks at the end of the text.\n\n        lineBreaksToAppend = 0; // if text starts with line breaks...\n\n        if (m = remaining.match(/^\\n+/)) {\n          // ... we want to write the exact same number of line breaks\n          // to the layout.\n          for (i = j = 1, ref = m[0].length; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {\n            this._writeLine('');\n          }\n\n          remaining = remaining.substr(m[0].length, remaining.length);\n        } // and if the text ends with line breaks...\n\n\n        if (m = remaining.match(/\\n+$/)) {\n          // we want to write the exact same number of line breaks\n          // to the end of the layout.\n          lineBreaksToAppend = m[0].length;\n          remaining = remaining.substr(0, remaining.length - m[0].length);\n        } // now let's parse the body of the text:\n\n\n        while (remaining.length > 0) {\n          // anything other than a break line...\n          if (m = remaining.match(/^[^\\n]+/)) {\n            // ... should be wrapped as a block of text.\n            this._writeLine(m[0]);\n\n            remaining = remaining.substr(m[0].length, remaining.length); // for any number of line breaks we find inside the text...\n          } else if (m = remaining.match(/^\\n+/)) {\n            // ... we write one less break line to the layout.\n            for (i = k = 1, ref1 = m[0].length; 1 <= ref1 ? k < ref1 : k > ref1; i = 1 <= ref1 ? ++k : --k) {\n              this._writeLine('');\n            }\n\n            remaining = remaining.substr(m[0].length, remaining.length);\n          }\n        } // if we had line breaks to append to the layout...\n\n\n        if (lineBreaksToAppend > 0) {\n          // ... we append the exact same number of line breaks to the layout.\n          for (i = l = 1, ref2 = lineBreaksToAppend; 1 <= ref2 ? l <= ref2 : l >= ref2; i = 1 <= ref2 ? ++l : --l) {\n            this._writeLine('');\n          }\n        }\n      } // wraps a line into multiple lines if necessary, adds horizontal margins,\n      // etc, and appends it to the layout.\n\n    }, {\n      key: \"_writeLine\",\n      value: function _writeLine(str) {\n        var line, lineContent, lineContentLength, remaining, roomLeft, toAppend, toAppendLength, toPrepend, toPrependLength; // we'll be cutting from our string as we go\n\n        remaining = new SpecialString(str);\n\n        while (true) {\n          // left margin...\n          // this will continue until nothing is left of our block.\n          toPrepend = this._toPrependToLine(); // ... and its length\n\n          toPrependLength = new SpecialString(toPrepend).length; // right margin...\n\n          toAppend = this._toAppendToLine(); // ... and its length\n\n          toAppendLength = new SpecialString(toAppend).length; // how much room is left for content\n\n          roomLeft = this._layout._config.terminalWidth - (toPrependLength + toAppendLength); // how much room each line of content will have\n\n          lineContentLength = Math.min(this._config.width, roomLeft); // cut line content, only for the amount needed\n\n          lineContent = remaining.cut(0, lineContentLength, true); // line will consist of both margins and the content\n\n          line = toPrepend + lineContent.str + toAppend; // send it off to layout\n\n          this._layout._appendLine(line);\n\n          if (remaining.isEmpty()) {\n            break;\n          }\n        }\n      }\n    }]);\n\n    return Block;\n  }();\n\n  ;\n  self = Block;\n  Block.defaultConfig = {\n    blockPrependor: {\n      fn: require('./block/blockPrependor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    blockAppendor: {\n      fn: require('./block/blockAppendor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    linePrependor: {\n      fn: require('./block/linePrependor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    lineAppendor: {\n      fn: require('./block/lineAppendor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    lineWrapper: {\n      fn: require('./block/lineWrapper/Default'),\n      options: {\n        lineWidth: null\n      }\n    },\n    width: terminalWidth,\n    prefixRaw: '',\n    suffixRaw: ''\n  };\n  return Block;\n}.call(void 0);"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}