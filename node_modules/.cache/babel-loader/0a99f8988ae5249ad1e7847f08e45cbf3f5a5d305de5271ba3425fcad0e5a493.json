{"ast":null,"code":"// @ts-check\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n/** @typedef {import(\"webpack/lib/FileSystemInfo\").Snapshot} Snapshot */\n'use strict';\n\n/**\n *\n * @param {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}} fileDependencies\n * @param {WebpackCompilation} mainCompilation\n * @param {number} startTime\n */\nfunction createSnapshot(fileDependencies, mainCompilation, startTime) {\n  return new Promise((resolve, reject) => {\n    mainCompilation.fileSystemInfo.createSnapshot(startTime, fileDependencies.fileDependencies, fileDependencies.contextDependencies, fileDependencies.missingDependencies, null, (err, snapshot) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(snapshot);\n    });\n  });\n}\n\n/**\n * Returns true if the files inside this snapshot\n * have not been changed\n *\n * @param {Snapshot} snapshot\n * @param {WebpackCompilation} mainCompilation\n * @returns {Promise<boolean>}\n */\nfunction isSnapShotValid(snapshot, mainCompilation) {\n  return new Promise((resolve, reject) => {\n    mainCompilation.fileSystemInfo.checkSnapshotValid(snapshot, (err, isValid) => {\n      if (err) {\n        reject(err);\n      }\n      resolve(isValid);\n    });\n  });\n}\n\n/**\n * Ensure that the files keep watched for changes\n * and will trigger a recompile\n *\n * @param {WebpackCompilation} mainCompilation\n * @param {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}} fileDependencies\n */\nfunction watchFiles(mainCompilation, fileDependencies) {\n  Object.keys(fileDependencies).forEach(depencyTypes => {\n    fileDependencies[depencyTypes].forEach(fileDependency => {\n      mainCompilation[depencyTypes].add(fileDependency);\n    });\n  });\n}\nmodule.exports = {\n  createSnapshot,\n  isSnapShotValid,\n  watchFiles\n};","map":{"version":3,"names":["createSnapshot","fileDependencies","mainCompilation","startTime","Promise","resolve","reject","fileSystemInfo","contextDependencies","missingDependencies","err","snapshot","isSnapShotValid","checkSnapshotValid","isValid","watchFiles","Object","keys","forEach","depencyTypes","fileDependency","add","module","exports"],"sources":["/Users/Chloe/Desktop/CS1300/UI-Portfolio/node_modules/html-webpack-plugin/lib/file-watcher-api.js"],"sourcesContent":["// @ts-check\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n/** @typedef {import(\"webpack/lib/FileSystemInfo\").Snapshot} Snapshot */\n'use strict';\n\n/**\n *\n * @param {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}} fileDependencies\n * @param {WebpackCompilation} mainCompilation\n * @param {number} startTime\n */\nfunction createSnapshot (fileDependencies, mainCompilation, startTime) {\n  return new Promise((resolve, reject) => {\n    mainCompilation.fileSystemInfo.createSnapshot(\n      startTime,\n      fileDependencies.fileDependencies,\n      fileDependencies.contextDependencies,\n      fileDependencies.missingDependencies,\n      null,\n      (err, snapshot) => {\n        if (err) {\n          return reject(err);\n        }\n        resolve(snapshot);\n      }\n    );\n  });\n}\n\n/**\n * Returns true if the files inside this snapshot\n * have not been changed\n *\n * @param {Snapshot} snapshot\n * @param {WebpackCompilation} mainCompilation\n * @returns {Promise<boolean>}\n */\nfunction isSnapShotValid (snapshot, mainCompilation) {\n  return new Promise((resolve, reject) => {\n    mainCompilation.fileSystemInfo.checkSnapshotValid(\n      snapshot,\n      (err, isValid) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(isValid);\n      }\n    );\n  });\n}\n\n/**\n * Ensure that the files keep watched for changes\n * and will trigger a recompile\n *\n * @param {WebpackCompilation} mainCompilation\n * @param {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}} fileDependencies\n */\nfunction watchFiles (mainCompilation, fileDependencies) {\n  Object.keys(fileDependencies).forEach((depencyTypes) => {\n    fileDependencies[depencyTypes].forEach(fileDependency => {\n      mainCompilation[depencyTypes].add(fileDependency);\n    });\n  });\n}\n\nmodule.exports = {\n  createSnapshot,\n  isSnapShotValid,\n  watchFiles\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,CAAEC,gBAAgB,EAAEC,eAAe,EAAEC,SAAS,EAAE;EACrE,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCJ,eAAe,CAACK,cAAc,CAACP,cAAc,CAC3CG,SAAS,EACTF,gBAAgB,CAACA,gBAAgB,EACjCA,gBAAgB,CAACO,mBAAmB,EACpCP,gBAAgB,CAACQ,mBAAmB,EACpC,IAAI,EACJ,CAACC,GAAG,EAAEC,QAAQ,KAAK;MACjB,IAAID,GAAG,EAAE;QACP,OAAOJ,MAAM,CAACI,GAAG,CAAC;MACpB;MACAL,OAAO,CAACM,QAAQ,CAAC;IACnB,CAAC,CACF;EACH,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAe,CAAED,QAAQ,EAAET,eAAe,EAAE;EACnD,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCJ,eAAe,CAACK,cAAc,CAACM,kBAAkB,CAC/CF,QAAQ,EACR,CAACD,GAAG,EAAEI,OAAO,KAAK;MAChB,IAAIJ,GAAG,EAAE;QACPJ,MAAM,CAACI,GAAG,CAAC;MACb;MACAL,OAAO,CAACS,OAAO,CAAC;IAClB,CAAC,CACF;EACH,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,CAAEb,eAAe,EAAED,gBAAgB,EAAE;EACtDe,MAAM,CAACC,IAAI,CAAChB,gBAAgB,CAAC,CAACiB,OAAO,CAAEC,YAAY,IAAK;IACtDlB,gBAAgB,CAACkB,YAAY,CAAC,CAACD,OAAO,CAACE,cAAc,IAAI;MACvDlB,eAAe,CAACiB,YAAY,CAAC,CAACE,GAAG,CAACD,cAAc,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEAE,MAAM,CAACC,OAAO,GAAG;EACfvB,cAAc;EACdY,eAAe;EACfG;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}