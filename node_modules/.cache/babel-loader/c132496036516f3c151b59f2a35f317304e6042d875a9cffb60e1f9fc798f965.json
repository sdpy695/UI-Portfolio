{"ast":null,"code":"// @ts-check\n/** @typedef {import(\"../typings\").HtmlTagObject} HtmlTagObject */\n/**\n * @file\n * This file provides to helper to create html as a object representation as\n * those objects are easier to modify than pure string representations\n *\n * Usage:\n * ```\n * const element = createHtmlTagObject('h1', {class: 'demo'}, 'Hello World');\n * const html = htmlTagObjectToString(element);\n * console.log(html) // -> <h1 class=\"demo\">Hello World</h1>\n * ```\n */\n\n/**\n * All html tag elements which must not contain innerHTML\n * @see https://www.w3.org/TR/html5/syntax.html#void-elements\n */\nconst voidTags = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\n\n/**\n * Turn a tag definition into a html string\n * @param {HtmlTagObject} tagDefinition\n *  A tag element according to the htmlWebpackPlugin object notation\n *\n * @param xhtml {boolean}\n *   Whether the generated html should add closing slashes to be xhtml compliant\n */\nfunction htmlTagObjectToString(tagDefinition, xhtml) {\n  const attributes = Object.keys(tagDefinition.attributes || {}).filter(function (attributeName) {\n    return tagDefinition.attributes[attributeName] === '' || tagDefinition.attributes[attributeName];\n  }).map(function (attributeName) {\n    if (tagDefinition.attributes[attributeName] === true) {\n      return xhtml ? attributeName + '=\"' + attributeName + '\"' : attributeName;\n    }\n    return attributeName + '=\"' + tagDefinition.attributes[attributeName] + '\"';\n  });\n  return '<' + [tagDefinition.tagName].concat(attributes).join(' ') + (tagDefinition.voidTag && xhtml ? '/' : '') + '>' + (tagDefinition.innerHTML || '') + (tagDefinition.voidTag ? '' : '</' + tagDefinition.tagName + '>');\n}\n\n/**\n * Static helper to create a tag object to be get injected into the dom\n *\n * @param {string} tagName\n * the name of the tag e.g. 'div'\n *\n * @param {{[attributeName: string]: string|boolean|null|undefined}} [attributes]\n * tag attributes e.g. `{ 'class': 'example', disabled: true }`\n *\n * @param {string} [innerHTML]\n *\n * @param {{[attributeName: string]: string|boolean|null|undefined}} [meta]\n * meta information about the tag e.g. `{ 'plugin': 'html-webpack-plugin' }`\n *\n * @returns {HtmlTagObject}\n */\nfunction createHtmlTagObject(tagName, attributes, innerHTML, meta) {\n  return {\n    tagName: tagName,\n    voidTag: voidTags.indexOf(tagName) !== -1,\n    attributes: attributes || {},\n    meta: meta || {},\n    innerHTML: innerHTML\n  };\n}\n\n/**\n * The `HtmlTagArray Array with a custom `.toString()` method.\n *\n * This allows the following:\n * ```\n *   const tags = HtmlTagArray.from([tag1, tag2]);\n *   const scriptTags = tags.filter((tag) => tag.tagName === 'script');\n *   const html = scriptTags.toString();\n * ```\n *\n * Or inside a string literal:\n * ```\n *   const tags = HtmlTagArray.from([tag1, tag2]);\n *   const html = `<html><body>${tags.filter((tag) => tag.tagName === 'script')}</body></html>`;\n * ```\n *\n */\nclass HtmlTagArray extends Array {\n  toString() {\n    return this.join('');\n  }\n}\nmodule.exports = {\n  HtmlTagArray: HtmlTagArray,\n  createHtmlTagObject: createHtmlTagObject,\n  htmlTagObjectToString: htmlTagObjectToString\n};","map":{"version":3,"names":["voidTags","htmlTagObjectToString","tagDefinition","xhtml","attributes","Object","keys","filter","attributeName","map","tagName","concat","join","voidTag","innerHTML","createHtmlTagObject","meta","indexOf","HtmlTagArray","Array","toString","module","exports"],"sources":["/Users/Chloe/Desktop/CS1300/UI-Portfolio/node_modules/html-webpack-plugin/lib/html-tags.js"],"sourcesContent":["// @ts-check\n/** @typedef {import(\"../typings\").HtmlTagObject} HtmlTagObject */\n/**\n * @file\n * This file provides to helper to create html as a object representation as\n * those objects are easier to modify than pure string representations\n *\n * Usage:\n * ```\n * const element = createHtmlTagObject('h1', {class: 'demo'}, 'Hello World');\n * const html = htmlTagObjectToString(element);\n * console.log(html) // -> <h1 class=\"demo\">Hello World</h1>\n * ```\n */\n\n/**\n * All html tag elements which must not contain innerHTML\n * @see https://www.w3.org/TR/html5/syntax.html#void-elements\n */\nconst voidTags = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\n\n/**\n * Turn a tag definition into a html string\n * @param {HtmlTagObject} tagDefinition\n *  A tag element according to the htmlWebpackPlugin object notation\n *\n * @param xhtml {boolean}\n *   Whether the generated html should add closing slashes to be xhtml compliant\n */\nfunction htmlTagObjectToString (tagDefinition, xhtml) {\n  const attributes = Object.keys(tagDefinition.attributes || {})\n    .filter(function (attributeName) {\n      return tagDefinition.attributes[attributeName] === '' || tagDefinition.attributes[attributeName];\n    })\n    .map(function (attributeName) {\n      if (tagDefinition.attributes[attributeName] === true) {\n        return xhtml ? attributeName + '=\"' + attributeName + '\"' : attributeName;\n      }\n      return attributeName + '=\"' + tagDefinition.attributes[attributeName] + '\"';\n    });\n  return '<' + [tagDefinition.tagName].concat(attributes).join(' ') + (tagDefinition.voidTag && xhtml ? '/' : '') + '>' +\n    (tagDefinition.innerHTML || '') +\n    (tagDefinition.voidTag ? '' : '</' + tagDefinition.tagName + '>');\n}\n\n/**\n * Static helper to create a tag object to be get injected into the dom\n *\n * @param {string} tagName\n * the name of the tag e.g. 'div'\n *\n * @param {{[attributeName: string]: string|boolean|null|undefined}} [attributes]\n * tag attributes e.g. `{ 'class': 'example', disabled: true }`\n *\n * @param {string} [innerHTML]\n *\n * @param {{[attributeName: string]: string|boolean|null|undefined}} [meta]\n * meta information about the tag e.g. `{ 'plugin': 'html-webpack-plugin' }`\n *\n * @returns {HtmlTagObject}\n */\nfunction createHtmlTagObject (tagName, attributes, innerHTML, meta) {\n  return {\n    tagName: tagName,\n    voidTag: voidTags.indexOf(tagName) !== -1,\n    attributes: attributes || {},\n    meta: meta || {},\n    innerHTML: innerHTML\n  };\n}\n\n/**\n * The `HtmlTagArray Array with a custom `.toString()` method.\n *\n * This allows the following:\n * ```\n *   const tags = HtmlTagArray.from([tag1, tag2]);\n *   const scriptTags = tags.filter((tag) => tag.tagName === 'script');\n *   const html = scriptTags.toString();\n * ```\n *\n * Or inside a string literal:\n * ```\n *   const tags = HtmlTagArray.from([tag1, tag2]);\n *   const html = `<html><body>${tags.filter((tag) => tag.tagName === 'script')}</body></html>`;\n * ```\n *\n */\nclass HtmlTagArray extends Array {\n  toString () {\n    return this.join('');\n  }\n}\n\nmodule.exports = {\n  HtmlTagArray: HtmlTagArray,\n  createHtmlTagObject: createHtmlTagObject,\n  htmlTagObjectToString: htmlTagObjectToString\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC;;AAE1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqB,CAAEC,aAAa,EAAEC,KAAK,EAAE;EACpD,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACJ,aAAa,CAACE,UAAU,IAAI,CAAC,CAAC,CAAC,CAC3DG,MAAM,CAAC,UAAUC,aAAa,EAAE;IAC/B,OAAON,aAAa,CAACE,UAAU,CAACI,aAAa,CAAC,KAAK,EAAE,IAAIN,aAAa,CAACE,UAAU,CAACI,aAAa,CAAC;EAClG,CAAC,CAAC,CACDC,GAAG,CAAC,UAAUD,aAAa,EAAE;IAC5B,IAAIN,aAAa,CAACE,UAAU,CAACI,aAAa,CAAC,KAAK,IAAI,EAAE;MACpD,OAAOL,KAAK,GAAGK,aAAa,GAAG,IAAI,GAAGA,aAAa,GAAG,GAAG,GAAGA,aAAa;IAC3E;IACA,OAAOA,aAAa,GAAG,IAAI,GAAGN,aAAa,CAACE,UAAU,CAACI,aAAa,CAAC,GAAG,GAAG;EAC7E,CAAC,CAAC;EACJ,OAAO,GAAG,GAAG,CAACN,aAAa,CAACQ,OAAO,CAAC,CAACC,MAAM,CAACP,UAAU,CAAC,CAACQ,IAAI,CAAC,GAAG,CAAC,IAAIV,aAAa,CAACW,OAAO,IAAIV,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,IAClHD,aAAa,CAACY,SAAS,IAAI,EAAE,CAAC,IAC9BZ,aAAa,CAACW,OAAO,GAAG,EAAE,GAAG,IAAI,GAAGX,aAAa,CAACQ,OAAO,GAAG,GAAG,CAAC;AACrE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,mBAAmB,CAAEL,OAAO,EAAEN,UAAU,EAAEU,SAAS,EAAEE,IAAI,EAAE;EAClE,OAAO;IACLN,OAAO,EAAEA,OAAO;IAChBG,OAAO,EAAEb,QAAQ,CAACiB,OAAO,CAACP,OAAO,CAAC,KAAK,CAAC,CAAC;IACzCN,UAAU,EAAEA,UAAU,IAAI,CAAC,CAAC;IAC5BY,IAAI,EAAEA,IAAI,IAAI,CAAC,CAAC;IAChBF,SAAS,EAAEA;EACb,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,YAAY,SAASC,KAAK,CAAC;EAC/BC,QAAQ,GAAI;IACV,OAAO,IAAI,CAACR,IAAI,CAAC,EAAE,CAAC;EACtB;AACF;AAEAS,MAAM,CAACC,OAAO,GAAG;EACfJ,YAAY,EAAEA,YAAY;EAC1BH,mBAAmB,EAAEA,mBAAmB;EACxCd,qBAAqB,EAAEA;AACzB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}