{"ast":null,"code":"\"use strict\";\n\nfunction isDirectoryIndex(resource, options) {\n  var verdict = false;\n  options.directoryIndexes.every(function (index) {\n    if (index === resource) {\n      verdict = true;\n      return false;\n    }\n    return true;\n  });\n  return verdict;\n}\nfunction parsePath(urlObj, options) {\n  var path = urlObj.path.absolute.string;\n  if (path) {\n    var lastSlash = path.lastIndexOf(\"/\");\n    if (lastSlash > -1) {\n      if (++lastSlash < path.length) {\n        var resource = path.substr(lastSlash);\n        if (resource !== \".\" && resource !== \"..\") {\n          urlObj.resource = resource;\n          path = path.substr(0, lastSlash);\n        } else {\n          path += \"/\";\n        }\n      }\n      urlObj.path.absolute.string = path;\n      urlObj.path.absolute.array = splitPath(path);\n    } else if (path === \".\" || path === \"..\") {\n      // \"..?var\", \"..#anchor\", etc ... not \"..index.html\"\n      path += \"/\";\n      urlObj.path.absolute.string = path;\n      urlObj.path.absolute.array = splitPath(path);\n    } else {\n      // Resource-only\n      urlObj.resource = path;\n      urlObj.path.absolute.string = null;\n    }\n    urlObj.extra.resourceIsIndex = isDirectoryIndex(urlObj.resource, options);\n  }\n  // Else: query/hash-only or empty\n}\n\nfunction splitPath(path) {\n  // TWEAK :: condition only for speed optimization\n  if (path !== \"/\") {\n    var cleaned = [];\n    path.split(\"/\").forEach(function (dir) {\n      // Cleanup -- splitting \"/dir/\" becomes [\"\",\"dir\",\"\"]\n      if (dir !== \"\") {\n        cleaned.push(dir);\n      }\n    });\n    return cleaned;\n  } else {\n    // Faster to skip the above block and just create an array\n    return [];\n  }\n}\nmodule.exports = parsePath;","map":{"version":3,"names":["isDirectoryIndex","resource","options","verdict","directoryIndexes","every","index","parsePath","urlObj","path","absolute","string","lastSlash","lastIndexOf","length","substr","array","splitPath","extra","resourceIsIndex","cleaned","split","forEach","dir","push","module","exports"],"sources":["/Users/Chloe/Desktop/CS1300/UI-Portfolio/node_modules/relateurl/lib/parse/path.js"],"sourcesContent":["\"use strict\";\n\nfunction isDirectoryIndex(resource, options)\n{\n\tvar verdict = false;\n\t\n\toptions.directoryIndexes.every( function(index)\n\t{\n\t\tif (index === resource)\n\t\t{\n\t\t\tverdict = true;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t});\n\t\n\treturn verdict;\n}\n\n\n\nfunction parsePath(urlObj, options)\n{\n\tvar path = urlObj.path.absolute.string;\n\t\n\tif (path)\n\t{\n\t\tvar lastSlash = path.lastIndexOf(\"/\");\n\t\t\n\t\tif (lastSlash > -1)\n\t\t{\n\t\t\tif (++lastSlash < path.length)\n\t\t\t{\n\t\t\t\tvar resource = path.substr(lastSlash);\n\t\t\t\t\n\t\t\t\tif (resource!==\".\" && resource!==\"..\")\n\t\t\t\t{\n\t\t\t\t\turlObj.resource = resource;\n\t\t\t\t\tpath = path.substr(0, lastSlash);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpath += \"/\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\turlObj.path.absolute.string = path;\n\t\t\turlObj.path.absolute.array = splitPath(path);\n\t\t}\n\t\telse if (path===\".\" || path===\"..\")\n\t\t{\n\t\t\t// \"..?var\", \"..#anchor\", etc ... not \"..index.html\"\n\t\t\tpath += \"/\";\n\t\t\t\n\t\t\turlObj.path.absolute.string = path;\n\t\t\turlObj.path.absolute.array = splitPath(path);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Resource-only\n\t\t\turlObj.resource = path;\n\t\t\turlObj.path.absolute.string = null;\n\t\t}\n\t\t\n\t\turlObj.extra.resourceIsIndex = isDirectoryIndex(urlObj.resource, options);\n\t}\n\t// Else: query/hash-only or empty\n}\n\n\n\nfunction splitPath(path)\n{\n\t// TWEAK :: condition only for speed optimization\n\tif (path !== \"/\")\n\t{\n\t\tvar cleaned = [];\n\t\t\n\t\tpath.split(\"/\").forEach( function(dir)\n\t\t{\n\t\t\t// Cleanup -- splitting \"/dir/\" becomes [\"\",\"dir\",\"\"]\n\t\t\tif (dir !== \"\")\n\t\t\t{\n\t\t\t\tcleaned.push(dir);\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn cleaned;\n\t}\n\telse\n\t{\n\t\t// Faster to skip the above block and just create an array\n\t\treturn [];\n\t}\n}\n\n\n\nmodule.exports = parsePath;\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,gBAAgB,CAACC,QAAQ,EAAEC,OAAO,EAC3C;EACC,IAAIC,OAAO,GAAG,KAAK;EAEnBD,OAAO,CAACE,gBAAgB,CAACC,KAAK,CAAE,UAASC,KAAK,EAC9C;IACC,IAAIA,KAAK,KAAKL,QAAQ,EACtB;MACCE,OAAO,GAAG,IAAI;MACd,OAAO,KAAK;IACb;IAEA,OAAO,IAAI;EACZ,CAAC,CAAC;EAEF,OAAOA,OAAO;AACf;AAIA,SAASI,SAAS,CAACC,MAAM,EAAEN,OAAO,EAClC;EACC,IAAIO,IAAI,GAAGD,MAAM,CAACC,IAAI,CAACC,QAAQ,CAACC,MAAM;EAEtC,IAAIF,IAAI,EACR;IACC,IAAIG,SAAS,GAAGH,IAAI,CAACI,WAAW,CAAC,GAAG,CAAC;IAErC,IAAID,SAAS,GAAG,CAAC,CAAC,EAClB;MACC,IAAI,EAAEA,SAAS,GAAGH,IAAI,CAACK,MAAM,EAC7B;QACC,IAAIb,QAAQ,GAAGQ,IAAI,CAACM,MAAM,CAACH,SAAS,CAAC;QAErC,IAAIX,QAAQ,KAAG,GAAG,IAAIA,QAAQ,KAAG,IAAI,EACrC;UACCO,MAAM,CAACP,QAAQ,GAAGA,QAAQ;UAC1BQ,IAAI,GAAGA,IAAI,CAACM,MAAM,CAAC,CAAC,EAAEH,SAAS,CAAC;QACjC,CAAC,MAED;UACCH,IAAI,IAAI,GAAG;QACZ;MACD;MAEAD,MAAM,CAACC,IAAI,CAACC,QAAQ,CAACC,MAAM,GAAGF,IAAI;MAClCD,MAAM,CAACC,IAAI,CAACC,QAAQ,CAACM,KAAK,GAAGC,SAAS,CAACR,IAAI,CAAC;IAC7C,CAAC,MACI,IAAIA,IAAI,KAAG,GAAG,IAAIA,IAAI,KAAG,IAAI,EAClC;MACC;MACAA,IAAI,IAAI,GAAG;MAEXD,MAAM,CAACC,IAAI,CAACC,QAAQ,CAACC,MAAM,GAAGF,IAAI;MAClCD,MAAM,CAACC,IAAI,CAACC,QAAQ,CAACM,KAAK,GAAGC,SAAS,CAACR,IAAI,CAAC;IAC7C,CAAC,MAED;MACC;MACAD,MAAM,CAACP,QAAQ,GAAGQ,IAAI;MACtBD,MAAM,CAACC,IAAI,CAACC,QAAQ,CAACC,MAAM,GAAG,IAAI;IACnC;IAEAH,MAAM,CAACU,KAAK,CAACC,eAAe,GAAGnB,gBAAgB,CAACQ,MAAM,CAACP,QAAQ,EAAEC,OAAO,CAAC;EAC1E;EACA;AACD;;AAIA,SAASe,SAAS,CAACR,IAAI,EACvB;EACC;EACA,IAAIA,IAAI,KAAK,GAAG,EAChB;IACC,IAAIW,OAAO,GAAG,EAAE;IAEhBX,IAAI,CAACY,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAE,UAASC,GAAG,EACrC;MACC;MACA,IAAIA,GAAG,KAAK,EAAE,EACd;QACCH,OAAO,CAACI,IAAI,CAACD,GAAG,CAAC;MAClB;IACD,CAAC,CAAC;IAEF,OAAOH,OAAO;EACf,CAAC,MAED;IACC;IACA,OAAO,EAAE;EACV;AACD;AAIAK,MAAM,CAACC,OAAO,GAAGnB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}